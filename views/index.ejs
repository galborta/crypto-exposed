<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Crypto Exposed - Exposing Crypto Scammers</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100">
    <%- include('partials/header') %>

    <main class="container mx-auto px-4 py-8">
        <!-- Search Section -->
        <div class="mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <h2 class="text-xl font-semibold mb-4">Search Scammers</h2>
                <div class="flex gap-4">
                    <input type="text" id="searchInput" placeholder="Search by name or project..." 
                           class="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <button onclick="searchProfiles()" class="bg-black text-white px-6 py-2 rounded-lg hover:bg-gray-800">
                        Search
                    </button>
                </div>
            </div>
        </div>

        <!-- Main List Section -->
        <div class="bg-white rounded-lg shadow overflow-hidden mb-8">
            <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
                <h2 class="text-xl font-semibold text-black">Wall of Shame</h2>
            </div>
            <div id="profilesGrid" class="divide-y divide-gray-200">
                <!-- Profiles will be rendered here -->
            </div>
        </div>

        <!-- Stats Section -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Total Amount Scammed</h3>
                <p class="text-2xl font-bold mt-2 text-red-600" id="totalScammed">$0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Total Scammers Exposed</h3>
                <p class="text-2xl font-bold mt-2" id="totalProfiles">0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Published Profiles</h3>
                <p class="text-2xl font-bold mt-2" id="publishedProfiles">0</p>
            </div>
        </div>
    </main>

    <!-- Profile Modal -->
    <div id="profileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full">
        <div class="relative mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md bg-white mt-10">
            <!-- Close button -->
            <button onclick="closeModal()" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600">
                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>

            <!-- Profile Header -->
            <div class="flex items-start space-x-4 mb-6">
                <img id="modalPhoto" class="w-24 h-24 rounded-full object-cover border-4 border-red-100" src="" alt="">
                <div class="flex-1">
                    <h3 class="text-2xl font-bold" id="modalName"></h3>
                    <div class="mt-1 text-sm text-gray-600" id="modalProjects"></div>
                    <div class="mt-3 bg-red-50 rounded-lg px-4 py-2 inline-block">
                        <p class="text-xs text-red-600 font-medium uppercase tracking-wide">Financial Impact</p>
                        <p class="text-lg font-bold text-red-700" id="modalAmount"></p>
                    </div>
                </div>
            </div>

            <!-- Overview Section -->
            <div class="mb-8">
                <h4 class="text-lg font-semibold mb-2">Overview</h4>
                <p class="text-gray-700 leading-relaxed" id="modalOverview"></p>
            </div>

            <!-- Basic Information Section -->
            <div class="mb-6">
                <button onclick="toggleBasicInfo()" class="w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                    <span class="text-lg font-semibold">Basic Information</span>
                    <svg id="basicInfoArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                    </svg>
                </button>
                <div id="basicInfoContent" class="hidden mt-4">
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Nationality</p>
                            <p class="font-medium" id="modalNationality"></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Date of Birth</p>
                            <p class="font-medium" id="modalDOB"></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Age</p>
                            <p class="font-medium" id="modalAge"></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Place of Birth</p>
                            <p class="font-medium" id="modalPlaceOfBirth"></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Height</p>
                            <p class="font-medium" id="modalHeight"></p>
                        </div>
                        <div class="bg-gray-50 p-3 rounded-lg">
                            <p class="text-sm text-gray-500">Weight</p>
                            <p class="font-medium" id="modalWeight"></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Story Section -->
            <div class="mb-6">
                <button onclick="toggleStory()" class="w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                    <span class="text-lg font-semibold">Story</span>
                    <svg id="storyArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                    </svg>
                </button>
                <div id="storyContent" class="hidden mt-4">
                    <div class="bg-gray-50 rounded-lg p-4">
                        <p class="text-gray-700" id="modalStory"></p>
                    </div>
                </div>
            </div>

            <!-- Methodology Section -->
            <div class="mb-8">
                <button onclick="toggleMethodology()" class="w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                    <span class="text-lg font-semibold">Methodology</span>
                    <svg id="methodologyArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </button>
                <div id="methodologyContent" class="hidden mt-4">
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <p class="text-gray-700" id="modalMethodology"></p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('partials/footer') %>

    <script>
        let profiles = [];
        let filteredProfiles = [];

        async function initialize() {
            try {
                // Fetch stats
                const statsResponse = await fetch('/api/profiles/stats');
                const stats = await statsResponse.json();
                
                // Update stats display
                document.getElementById('totalProfiles').textContent = stats.total || 0;
                document.getElementById('publishedProfiles').textContent = stats.publishedProfiles || 0;
                document.getElementById('totalScammed').textContent = formatCurrency(stats.totalScammedUSD || 0);
                
                // Fetch profiles
                const profilesResponse = await fetch('/api/profiles');
                const data = await profilesResponse.json();
                
                // Handle different response structures
                if (data.profiles) {
                    profiles = data.profiles;
                } else if (Array.isArray(data)) {
                    profiles = data;
                } else {
                    profiles = [];
                }
                
                // Filter published profiles and sort by amount scammed
                const publishedProfiles = profiles
                    .filter(p => p.status === 'Published')
                    .sort((a, b) => b.totalScammedUSD - a.totalScammedUSD);
                
                renderProfiles(publishedProfiles);
            } catch (error) {
                console.error('Error initializing:', error);
            }
        }

        function renderProfiles(profilesToShow) {
            const container = document.getElementById('profilesGrid');
            
            if (!profilesToShow || !profilesToShow.length) {
                container.innerHTML = '<p class="text-center text-gray-500 py-8">No profiles found</p>';
                return;
            }

            container.innerHTML = profilesToShow.map((profile) => `
                <div class="flex items-center px-4 sm:px-6 py-4 hover:bg-gray-50 cursor-pointer space-x-3 sm:space-x-4" 
                     onclick="showProfileDetails('${profile._id}')">
                    <div class="flex-none w-12 h-12 sm:w-16 sm:h-16">
                        <img src="${profile.photoUrl || '/default-avatar.svg'}" 
                             alt="${profile.name}" 
                             class="w-full h-full object-cover rounded-full">
                    </div>
                    <div class="flex-grow min-w-0">
                        <h3 class="text-base sm:text-lg font-semibold truncate">${profile.name}</h3>
                        <p class="text-xs sm:text-sm text-gray-500 truncate">${profile.associatedProjects || 'Unknown project'}</p>
                    </div>
                    <div class="flex-none text-right">
                        <p class="text-base sm:text-xl font-bold text-red-600">${formatCurrency(profile.totalScammedUSD)}</p>
                        <p class="text-xs sm:text-sm text-gray-500">Total Scammed</p>
                    </div>
                </div>
            `).join('');
        }

        function showProfileDetails(id) {
            const profile = profiles.find(p => p._id === id);
            if (profile) {
                document.getElementById('modalName').textContent = profile.name;
                document.getElementById('modalPhoto').src = profile.photoUrl || '/default-avatar.svg';
                document.getElementById('modalDOB').textContent = new Date(profile.dateOfBirth).toLocaleDateString();
                document.getElementById('modalAge').textContent = profile.age;
                document.getElementById('modalHeight').textContent = profile.height;
                document.getElementById('modalWeight').textContent = profile.weight;
                document.getElementById('modalNationality').textContent = profile.nationality;
                document.getElementById('modalPlaceOfBirth').textContent = profile.placeOfBirth;
                document.getElementById('modalAmount').textContent = formatCurrency(profile.totalScammedUSD);
                document.getElementById('modalOverview').textContent = profile.overview;
                document.getElementById('modalProjects').textContent = profile.associatedProjects || 'Unknown project';
                document.getElementById('modalStory').textContent = profile.story || 'No story available';
                document.getElementById('modalMethodology').textContent = profile.methodology;
                
                // Reset collapsible sections to closed state
                document.getElementById('basicInfoContent').classList.add('hidden');
                document.getElementById('basicInfoArrow').classList.remove('rotate-180');
                document.getElementById('methodologyContent').classList.add('hidden');
                document.getElementById('methodologyArrow').classList.remove('rotate-180');
                document.getElementById('storyContent').classList.add('hidden');
                document.getElementById('storyArrow').classList.remove('rotate-180');
                
                document.getElementById('profileModal').classList.remove('hidden');
                document.body.classList.add('modal-open');
            }
        }

        function closeModal() {
            document.getElementById('profileModal').classList.add('hidden');
            document.body.classList.remove('modal-open');
        }

        function searchProfiles() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filtered = profiles
                .filter(profile => 
                    profile.status === 'Published' && (
                        profile.name.toLowerCase().includes(searchTerm) ||
                        (profile.associatedProjects && profile.associatedProjects.toLowerCase().includes(searchTerm))
                    )
                )
                .sort((a, b) => b.totalScammedUSD - a.totalScammedUSD);
            
            renderProfiles(filtered);
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        function toggleBasicInfo() {
            const content = document.getElementById('basicInfoContent');
            const arrow = document.getElementById('basicInfoArrow');
            
            content.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        function toggleMethodology() {
            const content = document.getElementById('methodologyContent');
            const arrow = document.getElementById('methodologyArrow');
            
            content.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        function toggleStory() {
            const content = document.getElementById('storyContent');
            const arrow = document.getElementById('storyArrow');
            
            content.classList.toggle('hidden');
            arrow.classList.toggle('rotate-180');
        }

        // Initialize when page loads
        initialize();

        // Add search input event listener for real-time search
        document.getElementById('searchInput').addEventListener('input', searchProfiles);
    </script>

    <style>
        /* Modal styles */
        #profileModal {
            z-index: 50;
            padding: 1rem;
            transition: opacity 0.2s ease-in-out;
        }
        
        #profileModal.hidden {
            opacity: 0;
            pointer-events: none;
        }
        
        #profileModal:not(.hidden) {
            opacity: 1;
        }
        
        /* Modal content transition */
        #profileModal > div {
            transition: transform 0.2s ease-in-out;
            transform: scale(0.95);
        }
        
        #profileModal:not(.hidden) > div {
            transform: scale(1);
        }
        
        /* Prevent body scroll when modal is open */
        body.modal-open {
            overflow: hidden;
        }
        
        /* Smooth image loading */
        #modalPhoto {
            transition: opacity 0.2s ease-in-out;
        }
        
        #modalPhoto:not([src]), 
        #modalPhoto[src=""] {
            opacity: 0;
        }
        
        /* Add smooth transitions for collapsible sections */
        #basicInfoArrow,
        #methodologyArrow,
        #storyArrow {
            transition: transform 0.2s ease-in-out;
        }
        
        #basicInfoContent,
        #methodologyContent,
        #storyContent {
            transition: all 0.2s ease-in-out;
        }
        
        #basicInfoContent.hidden,
        #methodologyContent.hidden,
        #storyContent.hidden {
            display: none;
        }
    </style>
</body>
</html>