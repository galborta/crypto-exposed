<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>EXP0S3D - Exposing Crypto Scammers</title>
    <%- include('partials/styles') %>
    <style>
        @font-face {
            font-family: 'SpaceMono';
            src: url('/fonts/SpaceMono-Regular.woff2') format('woff2'),
                 url('/fonts/SpaceMono-Regular.woff') format('woff');
            font-weight: normal;
            font-style: normal;
            font-display: swap;
        }

        @font-face {
            font-family: 'SpaceMono';
            src: url('/fonts/SpaceMono-Bold.woff2') format('woff2'),
                 url('/fonts/SpaceMono-Bold.woff') format('woff');
            font-weight: bold;
            font-style: normal;
            font-display: swap;
        }

        @font-face {
            font-family: 'SpaceMono';
            src: url('/fonts/SpaceMono-Italic.woff2') format('woff2'),
                 url('/fonts/SpaceMono-Italic.woff') format('woff');
            font-weight: normal;
            font-style: italic;
            font-display: swap;
        }

        @font-face {
            font-family: 'SpaceMono';
            src: url('/fonts/SpaceMono-BoldItalic.woff2') format('woff2'),
                 url('/fonts/SpaceMono-BoldItalic.woff') format('woff');
            font-weight: bold;
            font-style: italic;
            font-display: swap;
        }

        body {
            background-color: #20201d;
        }

        /* Text colors for search and wall of shame */
        .text-black {
            color: #20201d !important;
        }

        #profilesGrid h3 {
            color: #20201d;
        }

        /* Modal content styling */
        #modalOverview,
        #modalStory,
        #modalMethodology {
            font-family: 'SpaceMono', monospace;
            font-size: 1.125rem; /* 18px base size for better readability */
            line-height: 1.5;
            color: #20201d;
            text-align: left;
            max-width: 65ch; /* Optimal line length */
            margin: 0 auto;
            padding: 0 1rem;
            white-space: pre-wrap; /* Preserve paragraph structure */
            word-break: normal;
            word-wrap: normal;
            overflow-wrap: normal;
            hyphens: none;
        }

        /* HTML formatting for modal content */
        #modalOverview strong,
        #modalStory strong,
        #modalMethodology strong,
        #modalOverview b,
        #modalStory b,
        #modalMethodology b {
            font-family: 'SpaceMono', monospace;
            font-weight: bold;
        }

        #modalOverview em,
        #modalStory em,
        #modalMethodology em,
        #modalOverview i,
        #modalStory i,
        #modalMethodology i {
            font-family: 'SpaceMono', monospace;
            font-style: italic;
        }

        #modalOverview strong em,
        #modalStory strong em,
        #modalMethodology strong em,
        #modalOverview b i,
        #modalStory b i,
        #modalMethodology b i,
        #modalOverview em strong,
        #modalStory em strong,
        #modalMethodology em strong,
        #modalOverview i b,
        #modalStory i b,
        #modalMethodology i b {
            font-family: 'SpaceMono', monospace;
            font-weight: bold;
            font-style: italic;
        }

        /* Paragraph spacing */
        #modalOverview p,
        #modalStory p,
        #modalMethodology p {
            margin-bottom: 1.5em; /* Space between paragraphs */
            font-weight: 400; /* Regular weight for body text */
        }

        /* Mobile-specific adjustments */
        @media screen and (max-width: 768px) {
            #modalOverview,
            #modalStory,
            #modalMethodology {
                font-size: 1rem; /* 16px on mobile */
                line-height: 1.5;
                padding: 0 0.75rem;
            }

            /* Ensure modal content is properly padded */
            .section-content .bg-gray-50 {
                padding: 1rem;
                max-height: 70vh; /* Limit height on mobile */
            }
        }

        /* Even smaller screens */
        @media screen and (max-width: 480px) {
            #modalOverview,
            #modalStory,
            #modalMethodology {
                font-size: 0.9375rem; /* 15px on very small screens */
                line-height: 1.5;
            }
        }

        /* High contrast and clear focus states for better accessibility */
        #modalOverview:focus,
        #modalStory:focus,
        #modalMethodology:focus {
            outline: 2px solid #20201d;
            outline-offset: 2px;
        }

        /* Improve text selection visibility */
        #modalOverview::selection,
        #modalStory::selection,
        #modalMethodology::selection {
            background-color: rgba(32, 32, 29, 0.2);
            color: #20201d;
        }

        /* Modal photo and name container */
        .modal-header {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            margin-bottom: 2rem;
        }

        /* Modal photo styling */
        #modalPhoto {
            transition: opacity 0.2s ease-in-out;
            width: 120px;
            height: 120px;
            margin: 0 auto 1rem auto;
            border-width: 4px;
            border-color: rgba(254, 226, 226, 1);
            border-radius: 9999px;
            object-fit: cover;
        }
        
        #modalPhoto:not([src]), 
        #modalPhoto[src=""] {
            opacity: 0;
        }

        /* Modal name styling */
        #modalName {
            color: #20201d;
            font-size: 1.5rem;
            line-height: 1.4;
            font-weight: 600;
            white-space: normal;
            text-align: center;
            margin: 0;
        }

        @media screen and (max-width: 768px) {
            #modalPhoto {
                width: 100px;
                height: 100px;
            }
            
            #modalName {
                font-size: 1.25rem;
            }
        }

        .section-button span {
            color: #20201d;
        }

        .section-button svg {
            width: 1.25rem;
            height: 1.25rem;
            color: #20201d;
            transition: transform 0.2s ease;
        }

        .section-button svg.rotated {
            transform: rotate(180deg);
        }

        /* Modal styles */
        #profileModal {
            position: fixed;
            inset: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 50;
        }
        
        #profileModal.hidden {
            display: none;
        }

        #profileModal > div {
            background: white;
            border-radius: 0.5rem;
            max-width: 64rem;
            width: calc(100% - 2rem);
            margin: 1rem;
            max-height: 90vh;
            overflow-y: auto;
            padding: 1.5rem;
        }

        /* Section styling */
        .section-content {
            display: none;
            margin-top: 1rem;
            position: relative;
            background: white;
        }
        
        .section-content.open {
            display: block;
        }

        .section-content .bg-gray-50 {
            background: white;
            padding: 1.25rem;
            border-radius: 0.5rem;
            border: 1px solid #e5e7eb;
            max-height: none;
            overflow: visible;
        }

        /* Section buttons */
        .section-button {
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 1rem;
            background-color: #f9fafb;
            border-radius: 0.5rem;
            cursor: pointer;
            border: 1px solid #e5e7eb;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
            transition: background-color 0.2s ease;
        }

        .section-button:hover {
            background-color: #f3f4f6;
        }

        .section-button span {
            color: #20201d;
            font-size: 1.125rem;
            font-weight: 600;
        }

        .section-button:focus {
            outline: none;
            ring: 2px solid #e5e7eb;
        }

        /* Content sections spacing */
        #overviewContent,
        #basicInfoContent,
        #storyContent,
        #methodologyContent {
            margin-bottom: 1.5rem;
        }

        /* Prevent body scroll when modal is open */
        body.modal-open {
            overflow: hidden;
        }

        /* Ensure content areas have proper spacing */
        .section-content .bg-gray-50 {
            margin-top: 0.5rem;
            margin-bottom: 1rem;
        }

        /* Basic Information section styling */
        #basicInfoContent .bg-gray-50 p {
            font-family: 'SpaceMono', monospace;
        }

        #basicInfoContent .text-sm {
            font-size: 0.875rem;
        }

        #basicInfoContent .font-medium {
            font-family: 'SpaceMono', monospace;
            font-weight: bold;
        }
    </style>
</head>
<body class="text-gray-100">
    <%- include('partials/header') %>

    <main class="container mx-auto px-4 py-8">
        <!-- Search Section -->
        <div class="mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex gap-4">
                    <input type="text" id="searchInput" placeholder="Search by name or project..." 
                           class="flex-1 p-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" style="background-color: white">
                    <button onclick="searchProfiles()" style="background-color: #20201D" class="px-4 py-2 text-white rounded-lg hover:opacity-90 transition-opacity">
                        Search
                    </button>
                </div>
            </div>
        </div>

        <!-- Main List Section -->
        <div class="bg-white rounded-lg shadow overflow-hidden mb-8">
            <div class="px-4 sm:px-6 py-4 border-b border-gray-200">
            </div>
            <div id="profilesGrid" class="divide-y divide-gray-200">
                <!-- Profiles will be rendered here -->
            </div>
        </div>

        <!-- Stats Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Total Financial Impact</h3>
                <p class="text-2xl font-bold mt-2" style="color: #9e2a2b" id="totalScammed">$0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex justify-between items-start">
                    <div>
                        <h3 class="text-gray-500 text-sm font-medium">Total Subjects Listed</h3>
                        <p class="text-2xl font-bold mt-2" style="color: #9e2a2b" id="totalSubjects">0</p>
                    </div>
                    <a href="/contact?form=submit" title="Submit New Entry" class="inline-flex items-center justify-center p-2 text-white rounded-full hover:opacity-90 transition-opacity" style="background-color: #20201D">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"/>
                        </svg>
                    </a>
                </div>
            </div>
        </div>
    </main>

    <!-- Profile Modal -->
    <div id="profileModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center hidden" onclick="handleModalClick(event)">
        <div class="bg-white rounded-lg max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div class="p-6">
                <!-- Close button -->
                <button onclick="closeModal()" class="float-right text-gray-500 hover:text-gray-700">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>

                <!-- Profile header with centered photo and name -->
                <div class="modal-header">
                    <img id="modalPhoto" src="" alt="">
                    <h3 id="modalName"></h3>
                    <div class="mt-1 text-sm text-gray-600" id="modalProjects"></div>
                    <div class="mt-3" style="background-color: rgba(158, 42, 43, 0.1); border-radius: 0.5rem; padding: 0.5rem 1rem;">
                        <p style="color: #9e2a2b" class="text-xs font-medium uppercase tracking-wide">Financial Impact</p>
                        <p style="color: #9e2a2b" class="text-lg font-bold" id="modalAmount"></p>
                    </div>
                </div>

                <!-- Overview Section -->
                <div class="mb-6">
                    <button onclick="toggleOverview()" class="section-button w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                        <span class="text-lg font-semibold">Overview</span>
                        <svg id="overviewArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div id="overviewContent" class="section-content">
                        <div class="bg-gray-50 rounded-lg p-4">
                            <p class="text-gray-700 whitespace-pre-wrap" id="modalOverview"></p>
                        </div>
                    </div>
                </div>

                <!-- Basic Information Section -->
                <div class="mb-6">
                    <button onclick="toggleBasicInfo()" class="section-button w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                        <span class="text-lg font-semibold">Basic Information</span>
                        <svg id="basicInfoArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div id="basicInfoContent" class="section-content">
                        <div class="grid grid-cols-2 sm:grid-cols-3 gap-4">
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Nationality</p>
                                <p class="font-medium" style="color: #20201D" id="modalNationality"></p>
                            </div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Date of Birth</p>
                                <p class="font-medium" style="color: #20201D" id="modalDOB"></p>
                            </div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Age</p>
                                <p class="font-medium" style="color: #20201D" id="modalAge"></p>
                            </div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Place of Birth</p>
                                <p class="font-medium" style="color: #20201D" id="modalPlaceOfBirth"></p>
                            </div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Height</p>
                                <p class="font-medium" style="color: #20201D" id="modalHeight"></p>
                                </div>
                            <div class="bg-gray-50 p-3 rounded-lg">
                                <p class="text-sm text-gray-500">Weight</p>
                                <p class="font-medium" style="color: #20201D" id="modalWeight"></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Story Section -->
                <div class="mb-6">
                    <button onclick="toggleStory()" class="section-button w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                        <span class="text-lg font-semibold">Story</span>
                        <svg id="storyArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div id="storyContent" class="section-content">
                        <div class="bg-gray-50 rounded-lg p-4">
                            <p class="text-gray-700 whitespace-pre-wrap" id="modalStory"></p>
                        </div>
                    </div>
                </div>

                <!-- Methodology Section -->
                <div class="mb-8">
                    <button onclick="toggleMethodology()" class="section-button w-full flex justify-between items-center py-2 px-4 bg-gray-50 rounded-lg hover:bg-gray-100">
                        <span class="text-lg font-semibold">Methodology</span>
                        <svg id="methodologyArrow" class="w-5 h-5 transform transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                        </svg>
                    </button>
                    <div id="methodologyContent" class="section-content">
                        <div class="bg-gray-50 p-4 rounded-lg">
                            <div class="text-gray-700" id="modalMethodology"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer style="background-color: #20201D">
        <div class="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
            <nav class="flex justify-center space-x-8 mb-6">
                <a href="/" class="text-white hover:text-gray-300 transition-colors">Home</a>
                <a href="/about" class="text-white hover:text-gray-300 transition-colors">About</a>
                <a href="/contact" class="text-white hover:text-gray-300 transition-colors">Contact</a>
                <a href="/contribute" class="text-white hover:text-gray-300 transition-colors">Contribute</a>
            </nav>
            <p class="text-center text-white text-sm">
                We must hold them accountable.
            </p>
        </div>
    </footer>

    <script>
        let profiles = [];
        let filteredProfiles = [];

        async function initialize() {
            try {
                // Fetch stats
                const statsResponse = await fetch('/api/profiles/stats');
                const stats = await statsResponse.json();
                
                // Update stats display
                document.getElementById('totalScammed').textContent = formatCurrency(stats.totalScammedUSD || 0);
                
                // Fetch profiles
                const profilesResponse = await fetch('/api/profiles');
                const data = await profilesResponse.json();
                
                // Handle different response structures
                if (data.profiles) {
                    profiles = data.profiles;
                } else if (Array.isArray(data)) {
                    profiles = data;
                } else {
                    profiles = [];
                }
                
                // Filter published profiles and sort by amount scammed
                const publishedProfiles = profiles
                    .filter(p => p.status === 'Published')
                    .sort((a, b) => b.totalScammedUSD - a.totalScammedUSD);
                
                // Update total subjects count
                document.getElementById('totalSubjects').textContent = publishedProfiles.length;
                
                renderProfiles(publishedProfiles);
            } catch (error) {
                console.error('Error initializing:', error);
            }
        }

        function renderProfiles(profilesToShow) {
            const container = document.getElementById('profilesGrid');
            
            if (!profilesToShow || !profilesToShow.length) {
                container.innerHTML = '<p class="text-center text-gray-500 py-8">No profiles found</p>';
                return;
            }

            container.innerHTML = profilesToShow.map((profile) => `
                <div class="flex items-center px-4 sm:px-6 py-4 hover:bg-gray-50 cursor-pointer space-x-3 sm:space-x-4" 
                     onclick="showProfileDetails('${profile._id}')">
                    <div class="flex-none w-12 h-12 sm:w-16 sm:h-16">
                        <img src="${profile.photoUrl || '/default-avatar.svg'}" 
                             alt="${profile.name}" 
                             class="w-full h-full object-cover rounded-full">
                    </div>
                    <div class="flex-grow min-w-0">
                        <h3 class="text-base sm:text-lg font-semibold truncate text-black">${profile.name}</h3>
                        <p class="text-xs sm:text-sm text-gray-500 truncate">${profile.associatedProjects || 'Unknown project'}</p>
                    </div>
                    <div class="flex-none text-right">
                        <p class="text-base sm:text-xl font-bold" style="color: #9e2a2b">${formatCurrency(profile.totalScammedUSD)}</p>
                        <p class="text-xs sm:text-sm text-gray-500">Total Scammed</p>
                    </div>
                </div>
            `).join('');
        }

        function showProfileDetails(id) {
            const profile = profiles.find(p => p._id === id);
            if (!profile) return;

            // Update modal content
            const elements = {
                'modalName': profile.name,
                'modalPhoto': profile.photoUrl || '/default-avatar.svg',
                'modalDOB': new Date(profile.dateOfBirth).toLocaleDateString(),
                'modalAge': profile.age,
                'modalHeight': profile.height,
                'modalWeight': profile.weight,
                'modalNationality': profile.nationality,
                'modalPlaceOfBirth': profile.placeOfBirth,
                'modalAmount': formatCurrency(profile.totalScammedUSD),
                'modalOverview': profile.overview || '',
                'modalProjects': profile.associatedProjects || 'Unknown project',
                'modalStory': profile.story || 'No story available'
            };

            // Safely update all elements
            Object.entries(elements).forEach(([id, value]) => {
                const element = document.getElementById(id);
                if (element) {
                    if (id === 'modalPhoto') {
                        element.src = value;
                    } else {
                        element.textContent = value;
                    }
                }
            });

            // Special handling for methodology to render as HTML list
            const modalMethodology = document.getElementById('modalMethodology');
            if (modalMethodology) {
                if (Array.isArray(profile.methodology)) {
                    // If it's already an array, create list items
                    const list = document.createElement('ul');
                    list.className = 'list-disc pl-6 space-y-2';
                    profile.methodology.forEach(item => {
                        const li = document.createElement('li');
                        li.textContent = item;
                        list.appendChild(li);
                    });
                    modalMethodology.innerHTML = '';
                    modalMethodology.appendChild(list);
                } else if (typeof profile.methodology === 'string' && profile.methodology.includes('<li>')) {
                    // If it's HTML string, parse it into an array first
                    const tempDiv = document.createElement('div');
                    tempDiv.innerHTML = profile.methodology;
                    const items = Array.from(tempDiv.querySelectorAll('li')).map(li => li.textContent.trim());
                    
                    const list = document.createElement('ul');
                    list.className = 'list-disc pl-6 space-y-2';
                    items.forEach(item => {
                        const li = document.createElement('li');
                        li.textContent = item;
                        list.appendChild(li);
                    });
                    modalMethodology.innerHTML = '';
                    modalMethodology.appendChild(list);
                } else {
                    modalMethodology.textContent = profile.methodology || '';
                }
            }

            // Reset all sections
            sections.forEach(section => {
                const content = document.getElementById(`${section}Content`);
                const arrow = document.getElementById(`${section}Arrow`);
                if (content && arrow) {
                    content.classList.remove('open');
                    arrow.classList.remove('rotated');
                }
            });

            // Show overview by default
            const overviewContent = document.getElementById('overviewContent');
            const overviewArrow = document.getElementById('overviewArrow');
            if (overviewContent && overviewArrow) {
                overviewContent.classList.add('open');
                overviewArrow.classList.add('rotated');
            }

            // Show modal
            document.getElementById('profileModal').classList.remove('hidden');
            document.body.classList.add('modal-open');
        }

        function handleModalClick(event) {
            if (event.target.id === 'profileModal') {
                closeModal();
            }
        }

        function closeModal() {
            document.getElementById('profileModal').classList.add('hidden');
            document.body.classList.remove('modal-open');
            
            // Reset all sections when closing
            sections.forEach(section => {
                const content = document.getElementById(`${section}Content`);
                const arrow = document.getElementById(`${section}Arrow`);
                if (content && arrow) {
                    content.classList.remove('open');
                    arrow.classList.remove('rotated');
                }
            });
        }

        function searchProfiles() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const filtered = profiles
                .filter(profile => 
                    profile.status === 'Published' && (
                        profile.name.toLowerCase().includes(searchTerm) ||
                        (profile.associatedProjects && profile.associatedProjects.toLowerCase().includes(searchTerm))
                    )
                )
                .sort((a, b) => b.totalScammedUSD - a.totalScammedUSD);
            
            renderProfiles(filtered);
        }

        function formatCurrency(amount) {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }

        const sections = ['overview', 'basicInfo', 'story', 'methodology'];
        
        function getNextSection(currentSection) {
            const currentIndex = sections.indexOf(currentSection);
            return sections[(currentIndex + 1) % sections.length];
        }
        
        function toggleSection(section) {
            const content = document.getElementById(`${section}Content`);
            const arrow = document.getElementById(`${section}Arrow`);
            
            if (!content || !arrow) return;

            const isCurrentlyOpen = content.classList.contains('open');
            
            // Close all sections first
            sections.forEach(s => {
                const sContent = document.getElementById(`${s}Content`);
                const sArrow = document.getElementById(`${s}Arrow`);
                if (sContent && sArrow) {
                    sContent.classList.remove('open');
                    sArrow.classList.remove('rotated');
                }
            });

            // If the clicked section wasn't open, open it
            if (!isCurrentlyOpen) {
                content.classList.add('open');
                arrow.classList.add('rotated');
            }
        }

        function toggleOverview() {
            toggleSection('overview');
        }

        function toggleBasicInfo() {
            toggleSection('basicInfo');
        }

        function toggleStory() {
            toggleSection('story');
        }

        function toggleMethodology() {
            toggleSection('methodology');
        }

        // Initialize when page loads
        initialize();

        // Add search input event listener for real-time search
        document.getElementById('searchInput').addEventListener('input', searchProfiles);

        // Add escape key listener for closing modal
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeModal();
            }
        });
    </script>
</body>
</html>