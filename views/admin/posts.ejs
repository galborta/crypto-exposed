<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Manage Posts | Admin Panel</title>
  <link rel="stylesheet" href="/css/output.css">
</head>
<body class="bg-gray-100">
  <div class="min-h-screen flex flex-col">
    <!-- Navigation -->
    <header class="bg-white shadow">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <div class="flex">
            <div class="flex-shrink-0 flex items-center">
              <h1 class="text-xl font-bold">Admin Panel</h1>
            </div>
            <nav class="ml-6 flex space-x-8">
              <a href="/admin/dashboard" class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                Dashboard
              </a>
              <a href="/admin/posts" class="border-blue-500 text-gray-900 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium">
                Posts
              </a>
            </nav>
          </div>
          <div class="flex items-center">
            <button id="logout-button" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded">
              Logout
            </button>
          </div>
        </div>
      </div>
    </header>

    <!-- Main content -->
    <main class="flex-1 py-6">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center mb-4">
          <h3 class="text-lg font-semibold">Manage Posts</h3>
          <a href="/admin/posts/new" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
            New Post
          </a>
        </div>

        <!-- Stats -->
        <div class="grid grid-cols-1 gap-5 sm:grid-cols-3 mb-6">
          <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
              <dt class="text-sm font-medium text-gray-500 truncate">Total Posts</dt>
              <dd class="mt-1 text-3xl font-semibold text-gray-900" id="total-posts">...</dd>
            </div>
          </div>
          <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
              <dt class="text-sm font-medium text-gray-500 truncate">Published Posts</dt>
              <dd class="mt-1 text-3xl font-semibold text-gray-900" id="published-posts">...</dd>
            </div>
          </div>
          <div class="bg-white overflow-hidden shadow rounded-lg">
            <div class="px-4 py-5 sm:p-6">
              <dt class="text-sm font-medium text-gray-500 truncate">Draft Posts</dt>
              <dd class="mt-1 text-3xl font-semibold text-gray-900" id="draft-posts">...</dd>
            </div>
          </div>
        </div>

        <!-- Posts List -->
        <div class="bg-white shadow overflow-hidden sm:rounded-md">
          <div class="px-4 py-5 border-b border-gray-200 sm:px-6">
            <div class="flex items-center justify-between">
              <h3 class="text-lg leading-6 font-medium text-gray-900">All Posts</h3>
              <div class="flex items-center space-x-4">
                <select id="filter-status" class="rounded-md border border-gray-300 py-2 px-3 text-sm">
                  <option value="all">All Posts</option>
                  <option value="published">Published</option>
                  <option value="draft">Drafts</option>
                </select>
                <input type="text" id="search-posts" placeholder="Search posts..." 
                  class="rounded-md border border-gray-300 py-2 px-3 text-sm">
              </div>
            </div>
          </div>
          <ul id="posts-list" class="divide-y divide-gray-200">
            <li class="px-4 py-4 sm:px-6">Loading posts...</li>
          </ul>
          <div class="px-4 py-3 bg-gray-50 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div class="flex-1 flex justify-between sm:hidden">
              <button id="prev-page-mobile" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                Previous
              </button>
              <button id="next-page-mobile" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                Next
              </button>
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p class="text-sm text-gray-700">
                  Showing <span id="showing-start">0</span> to <span id="showing-end">0</span> of <span id="total-items">0</span> posts
                </p>
              </div>
              <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  <button id="prev-page" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    Previous
                  </button>
                  <div id="pagination-numbers" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-700">
                    Page <span id="current-page">1</span> of <span id="total-pages">1</span>
                  </div>
                  <button id="next-page" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                    Next
                  </button>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      console.log('[ADMIN POSTS] Initializing posts management page');
      const token = localStorage.getItem('adminToken');
      
      if (!token) {
        console.log('[ADMIN POSTS] No token found, redirecting to login');
        window.location.href = '/admin';
        return;
      }

      let currentPage = 1;
      let postsPerPage = 10;
      let currentFilter = 'all';
      let searchQuery = '';

      // Load initial data
      await loadPosts();
      await loadStats();

      // Event listeners
      document.getElementById('filter-status').addEventListener('change', async (e) => {
        console.log(`[ADMIN POSTS] Filter changed to: ${e.target.value}`);
        currentFilter = e.target.value;
        currentPage = 1;
        await loadPosts();
      });

      document.getElementById('search-posts').addEventListener('input', debounce(async (e) => {
        console.log(`[ADMIN POSTS] Search query: ${e.target.value}`);
        searchQuery = e.target.value;
        currentPage = 1;
        await loadPosts();
      }, 300));

      ['prev-page', 'prev-page-mobile'].forEach(id => {
        document.getElementById(id)?.addEventListener('click', async () => {
          if (currentPage > 1) {
            console.log('[ADMIN POSTS] Loading previous page');
            currentPage--;
            await loadPosts();
          }
        });
      });

      ['next-page', 'next-page-mobile'].forEach(id => {
        document.getElementById(id)?.addEventListener('click', async () => {
          console.log('[ADMIN POSTS] Loading next page');
          currentPage++;
          await loadPosts();
        });
      });

      document.getElementById('logout-button').addEventListener('click', () => {
        console.log('[ADMIN POSTS] Logging out');
        localStorage.removeItem('adminToken');
        window.location.href = '/admin';
      });

      async function loadStats() {
        console.log('[ADMIN POSTS] Loading post statistics');
        try {
          const response = await fetch('/api/admin/posts/stats', {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          const data = await response.json();
          
          if (data.success) {
            console.log('[ADMIN POSTS] Statistics loaded successfully');
            document.getElementById('total-posts').textContent = data.data.total;
            document.getElementById('published-posts').textContent = data.data.published;
            document.getElementById('draft-posts').textContent = data.data.draft;
          } else {
            console.error('[ADMIN POSTS] Error loading statistics:', data.message);
          }
        } catch (error) {
          console.error('[ADMIN POSTS] Error fetching statistics:', error);
        }
      }

      async function loadPosts() {
        console.log(`[ADMIN POSTS] Loading posts (page ${currentPage}, filter: ${currentFilter})`);
        try {
          let url = `/api/admin/posts?page=${currentPage}&limit=${postsPerPage}`;
          if (currentFilter !== 'all') {
            url += `&status=${currentFilter}`;
          }
          if (searchQuery) {
            url += `&search=${encodeURIComponent(searchQuery)}`;
          }

          const response = await fetch(url, {
            headers: {
              'Authorization': `Bearer ${token}`
            }
          });
          
          const data = await response.json();
          
          if (data.success) {
            console.log(`[ADMIN POSTS] Loaded ${data.count} posts`);
            const postsList = document.getElementById('posts-list');
            postsList.innerHTML = '';
            
            if (data.data.length === 0) {
              postsList.innerHTML = '<li class="px-4 py-4 sm:px-6 text-center text-gray-500">No posts found</li>';
              return;
            }

            data.data.forEach(post => {
              const li = document.createElement('li');
              li.className = 'hover:bg-gray-50';
              li.innerHTML = `
                <div class="px-4 py-4 sm:px-6">
                  <div class="flex items-center justify-between">
                    <div class="flex items-center">
                      <p class="text-sm font-medium text-blue-600 truncate">${post.title}</p>
                      <span class="ml-2 px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        post.published ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                      }">
                        ${post.published ? 'Published' : 'Draft'}
                      </span>
                    </div>
                    <div class="flex space-x-2">
                      <a href="/admin/posts/edit/${post.slug}" class="text-blue-600 hover:text-blue-900">Edit</a>
                      <button class="text-red-600 hover:text-red-900 delete-post" data-id="${post._id}">Delete</button>
                    </div>
                  </div>
                  <div class="mt-2 sm:flex sm:justify-between">
                    <div class="sm:flex">
                      <p class="flex items-center text-sm text-gray-500">
                        ${post.excerpt.substring(0, 100)}${post.excerpt.length > 100 ? '...' : ''}
                      </p>
                    </div>
                    <div class="mt-2 flex items-center text-sm text-gray-500 sm:mt-0">
                      <p>
                        Last updated: ${new Date(post.updatedAt).toLocaleDateString()}
                      </p>
                    </div>
                  </div>
                </div>
              `;
              postsList.appendChild(li);

              // Add delete event listener
              const deleteBtn = li.querySelector('.delete-post');
              deleteBtn.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete this post?')) {
                  console.log(`[ADMIN POSTS] Deleting post: ${post._id}`);
                  try {
                    const response = await fetch(`/api/admin/posts/${post._id}`, {
                      method: 'DELETE',
                      headers: {
                        'Authorization': `Bearer ${token}`
                      }
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                      console.log('[ADMIN POSTS] Post deleted successfully');
                      await loadPosts();
                      await loadStats();
                    } else {
                      console.error('[ADMIN POSTS] Error deleting post:', result.message);
                      alert(`Error: ${result.message}`);
                    }
                  } catch (error) {
                    console.error('[ADMIN POSTS] Error deleting post:', error);
                    alert('Error deleting post');
                  }
                }
              });
            });

            // Update pagination
            document.getElementById('showing-start').textContent = (currentPage - 1) * postsPerPage + 1;
            document.getElementById('showing-end').textContent = Math.min(currentPage * postsPerPage, data.total);
            document.getElementById('total-items').textContent = data.total;
            document.getElementById('current-page').textContent = currentPage;
            document.getElementById('total-pages').textContent = data.pagination.pages;

            // Update button states
            ['prev-page', 'prev-page-mobile'].forEach(id => {
              const btn = document.getElementById(id);
              if (btn) {
                btn.disabled = currentPage === 1;
                btn.classList.toggle('opacity-50', currentPage === 1);
              }
            });

            ['next-page', 'next-page-mobile'].forEach(id => {
              const btn = document.getElementById(id);
              if (btn) {
                btn.disabled = currentPage === data.pagination.pages;
                btn.classList.toggle('opacity-50', currentPage === data.pagination.pages);
              }
            });
          } else {
            console.error('[ADMIN POSTS] Error loading posts:', data.message);
          }
        } catch (error) {
          console.error('[ADMIN POSTS] Error fetching posts:', error);
        }
      }

      function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
          const later = () => {
            clearTimeout(timeout);
            func(...args);
          };
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
        };
      }
    });
  </script>
</body>
</html> 