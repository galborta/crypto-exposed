<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="csrf-token" content="<%= csrfToken %>">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/admin.css">
</head>
<body class="bg-gray-100">
    <%- include('../partials/adminNav') %>

    <main class="container mx-auto px-4 py-8">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">Scammer Profiles</h1>
            <button onclick="openModal()" class="btn btn-primary">
                Add New Profile
            </button>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Total Profiles</h3>
                <p class="text-2xl font-bold mt-2" id="totalProfiles">0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Published Profiles</h3>
                <p class="text-2xl font-bold mt-2" id="publishedProfiles">0</p>
            </div>
            <div class="bg-white rounded-lg shadow p-6">
                <h3 class="text-gray-500 text-sm font-medium">Total Amount Scammed</h3>
                <p class="text-2xl font-bold mt-2" id="totalScammed">$0</p>
            </div>
        </div>

        <!-- Profiles Table -->
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                File #
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Name
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Amount Scammed
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Status
                            </th>
                            <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                Actions
                            </th>
                        </tr>
                    </thead>
                    <tbody id="profilesTableBody" class="bg-white divide-y divide-gray-200">
                        <!-- Profiles will be rendered here -->
                    </tbody>
                </table>
            </div>
        </div>
    </main>

    <!-- Modal -->
    <div id="profileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full flex items-center justify-center">
        <div class="relative mx-auto p-0 border w-[32rem] shadow-lg rounded-md bg-white max-h-[90vh] flex flex-col">
            <!-- Sticky Header -->
            <div class="sticky top-0 bg-white border-b z-20 px-5 py-4">
                <div class="flex justify-between items-center">
                    <h3 class="text-lg font-medium text-gray-900" id="modalTitle">Add New Profile</h3>
                    <button type="button" onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                        <span class="sr-only">Close</span>
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
            </div>
            <!-- Scrollable Content -->
            <div class="p-5 overflow-y-auto flex-1">
                <form id="profileForm" class="space-y-4">
                    <input type="hidden" id="profileId">
                    
                    <!-- Basic Information Section -->
                    <div class="border-b pb-4">
                        <h4 class="text-md font-medium text-gray-900 mb-3">Basic Information</h4>
                        <div class="space-y-3">
                            <div>
                                <label class="block text-sm font-medium text-gray-700">File Case</label>
                                <input type="text" id="fileNumber" readonly class="mt-1 block w-full rounded-md border-gray-300 shadow-sm bg-gray-50">
                                <p class="mt-1 text-xs text-gray-500">Automatically generated</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Photo</label>
                                <div class="mt-1 flex items-center space-x-4">
                                    <div class="flex-shrink-0">
                                        <img id="photoPreview" class="h-24 w-24 rounded-lg object-cover bg-gray-100" 
                                             src="" alt="Profile photo preview">
                                    </div>
                                    <div class="flex-1">
                                        <input type="file" id="photoInput" accept="image/*"
                                               class="block w-full text-sm text-gray-500
                                                      file:mr-4 file:py-2 file:px-4
                                                      file:rounded-md file:border-0
                                                      file:text-sm file:font-semibold
                                                      file:bg-indigo-50 file:text-indigo-700
                                                      hover:file:bg-indigo-100">
                                        <input type="hidden" id="photoUrl">
                                        <p class="mt-1 text-xs text-gray-500">Upload a photo of the scammer (max 5MB)</p>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Name</label>
                                <input type="text" id="name" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Date of Birth</label>
                                <input type="date" id="dateOfBirth" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Age</label>
                                <input type="number" id="age" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Height</label>
                                <input type="text" id="height" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., 5'11">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Weight</label>
                                <input type="text" id="weight" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., 170 lbs">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Nationality</label>
                                <input type="text" id="nationality" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700">Place of Birth</label>
                                <input type="text" id="placeOfBirth" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="e.g., Palo Alto, California, USA">
                            </div>
                        </div>
                    </div>

                    <!-- Other Information -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Amount Scammed (USD)</label>
                        <input type="number" id="totalScammedUSD" required min="0" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                    </div>
                    <div class="col-span-6">
                        <label class="block text-sm font-medium text-gray-700">Overview</label>
                        <textarea id="overview" required minlength="50" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
                        rows="4" placeholder="Provide a detailed overview of the scammer's activities (minimum 50 characters)..."></textarea>
                        <div class="text-xs text-gray-500 mt-1">
                            <span id="overviewCount">0</span>/50 characters minimum
                        </div>
                    </div>
                    <div class="col-span-6">
                        <label class="block text-sm font-medium text-gray-700">Story</label>
                        <textarea id="story" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" 
                        rows="6" placeholder="Provide a detailed narrative of the scammer's story..."></textarea>
                    </div>
                    <div class="col-span-6">
                        <label class="block text-sm font-medium text-gray-700">Methodology</label>
                        <textarea id="methodology" required minlength="50" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" 
                        rows="4" placeholder="Describe the scam methodology used (minimum 50 characters)..."></textarea>
                        <div class="text-xs text-gray-500 mt-1">
                            <span id="methodologyCount">0</span>/50 characters minimum
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Associated Projects</label>
                        <textarea id="associatedProjects" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" 
                        rows="3" placeholder="List all associated projects, one per line..."></textarea>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Status</label>
                        <select id="status" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm">
                            <option value="Draft">Draft</option>
                            <option value="Published">Published</option>
                        </select>
                    </div>
                    <div class="flex justify-end space-x-3">
                        <button type="button" onclick="closeModal()" class="btn bg-gray-200 text-gray-800 hover:bg-gray-300">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            Save Profile
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <style>
        /* Ensure modal content is scrollable */
        #profileModal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: 50;
            padding: 1rem;
        }
        
        #profileModal.show {
            display: flex;
        }
        
        /* Prevent body scroll when modal is open */
        body.modal-open {
            overflow: hidden;
        }

        /* Ensure form inputs don't overflow */
        #profileForm input,
        #profileForm textarea,
        #profileForm select {
            max-width: 100%;
        }
    </style>

    <script>
        let profiles = [];
        let currentPage = 1;
        let totalPages = 1;
        let isLoading = false;

        // Fetch and display profiles
        async function fetchProfiles(page = 1) {
            if (isLoading) return;
            isLoading = true;

            try {
                const response = await fetch(`/api/profiles?page=${page}&limit=10`);
                const data = await response.json();

                // Update profiles array
                profiles = data.profiles;
                currentPage = data.pagination.page;
                totalPages = data.pagination.pages;
                
                // Update stats
                document.getElementById('totalProfiles').textContent = data.stats.total || 0;
                document.getElementById('publishedProfiles').textContent = data.stats.publishedProfiles || 0;
                document.getElementById('totalScammed').textContent = new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 0,
                    maximumFractionDigits: 0
                }).format(data.stats.totalScammedUSD || 0);

                // Render profiles
                renderProfiles();
                renderPagination();
            } catch (error) {
                console.error('Error fetching data:', error);
            } finally {
                isLoading = false;
            }
        }

        // Render profiles in table
        function renderProfiles() {
            const tbody = document.getElementById('profilesTableBody');
            
            // Clear existing content
            tbody.innerHTML = '';

            // Create document fragment for better performance
            const fragment = document.createDocumentFragment();

            profiles.forEach(profile => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900">
                        ${profile.fileNumber || 'N/A'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="flex-shrink-0 h-10 w-10">
                                <img class="h-10 w-10 rounded-full object-cover" 
                                     src="${profile.photoUrl || '/default-avatar.svg'}" 
                                     alt="${profile.name}"
                                     loading="lazy">
                            </div>
                            <div class="ml-4">
                                <div class="text-sm font-medium text-gray-900">${profile.name || 'N/A'}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900 font-medium">
                            ${new Intl.NumberFormat('en-US', {
                                style: 'currency',
                                currency: 'USD',
                                minimumFractionDigits: 0,
                                maximumFractionDigits: 0
                            }).format(profile.totalScammedUSD || 0)}
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="status-badge ${profile.status === 'Published' ? 'status-active' : 'status-inactive'}">
                            ${profile.status || 'Draft'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <button onclick="openModal('${profile._id}')" class="text-indigo-600 hover:text-indigo-900 mr-3">
                            Edit
                        </button>
                        <button onclick="deleteProfile('${profile._id}')" class="text-red-600 hover:text-red-900">
                            Delete
                        </button>
                    </td>
                `;
                fragment.appendChild(tr);
            });

            tbody.appendChild(fragment);

            // Show no results message if needed
            if (profiles.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="5" class="px-6 py-4 text-center text-gray-500">
                            No profiles found
                        </td>
                    </tr>
                `;
            }
        }

        // Render pagination controls
        function renderPagination() {
            const paginationContainer = document.getElementById('pagination');
            if (!paginationContainer) return;

            let html = '<div class="flex justify-center space-x-2 mt-4">';
            
            // Previous button
            html += `
                <button 
                    onclick="changePage(${currentPage - 1})" 
                    class="px-3 py-1 rounded ${currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}"
                    ${currentPage === 1 ? 'disabled' : ''}>
                    Previous
                </button>
            `;

            // Page numbers
            for (let i = 1; i <= totalPages; i++) {
                if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                    html += `
                        <button 
                            onclick="changePage(${i})" 
                            class="px-3 py-1 rounded ${i === currentPage ? 'bg-indigo-600 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}">
                            ${i}
                        </button>
                    `;
                } else if (i === currentPage - 3 || i === currentPage + 3) {
                    html += '<span class="px-2">...</span>';
                }
            }

            // Next button
            html += `
                <button 
                    onclick="changePage(${currentPage + 1})" 
                    class="px-3 py-1 rounded ${currentPage === totalPages ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}"
                    ${currentPage === totalPages ? 'disabled' : ''}>
                    Next
                </button>
            `;

            html += '</div>';
            paginationContainer.innerHTML = html;
        }

        // Change page
        async function changePage(page) {
            if (page < 1 || page > totalPages || page === currentPage) return;
            await fetchProfiles(page);
            window.scrollTo(0, 0);
        }

        // Modal functions
        function openModal(profileId = null) {
            const modal = document.getElementById('profileModal');
            const modalTitle = document.getElementById('modalTitle');
            const form = document.getElementById('profileForm');
            const photoPreview = document.getElementById('photoPreview');
            const photoInput = document.getElementById('photoInput');

            if (profileId) {
                // Edit mode
                const profile = profiles.find(p => p._id === profileId);
                if (profile) {
                    modalTitle.textContent = 'Edit Profile';
                    document.getElementById('profileId').value = profile._id;
                    document.getElementById('fileNumber').value = profile.fileNumber || '';
                    document.getElementById('name').value = profile.name || '';
                    // Safely handle date format
                    const dob = profile.dateOfBirth ? new Date(profile.dateOfBirth) : null;
                    document.getElementById('dateOfBirth').value = dob ? dob.toISOString().split('T')[0] : '';
                    document.getElementById('age').value = profile.age || '';
                    document.getElementById('height').value = profile.height || '';
                    document.getElementById('weight').value = profile.weight || '';
                    document.getElementById('nationality').value = profile.nationality || '';
                    document.getElementById('placeOfBirth').value = profile.placeOfBirth || '';
                    document.getElementById('photoUrl').value = profile.photoUrl || '';
                    photoPreview.src = profile.photoUrl || '';
                    photoPreview.style.display = profile.photoUrl ? 'block' : 'none';
                    photoInput.value = ''; // Clear file input
                    document.getElementById('totalScammedUSD').value = profile.totalScammedUSD || 0;
                    document.getElementById('overview').value = profile.overview || '';
                    document.getElementById('methodology').value = profile.methodology || '';
                    document.getElementById('associatedProjects').value = profile.associatedProjects || '';
                    document.getElementById('story').value = profile.story || '';
                    document.getElementById('status').value = profile.status || 'Draft';
                    
                    // Safely update character counts
                    document.getElementById('overviewCount').textContent = (profile.overview || '').length;
                    document.getElementById('methodologyCount').textContent = (profile.methodology || '').length;
                }
            } else {
                // Add new mode
                modalTitle.textContent = 'Add New Profile';
                form.reset();
                document.getElementById('profileId').value = '';
                photoPreview.src = '';
                photoPreview.style.display = 'none';
                document.getElementById('photoUrl').value = '';
                // Reset character counts
                document.getElementById('overviewCount').textContent = '0';
                document.getElementById('methodologyCount').textContent = '0';
            }

            modal.classList.remove('hidden');
            modal.classList.add('show');
            document.body.classList.add('modal-open');
        }

        function closeModal() {
            const modal = document.getElementById('profileModal');
            modal.classList.remove('show');
            modal.classList.add('hidden');
            document.body.classList.remove('modal-open');
        }

        // Delete profile
        async function deleteProfile(id) {
            if (confirm('Are you sure you want to delete this profile?')) {
                try {
                    const response = await fetch(`/api/profiles/${id}`, {
                        method: 'DELETE'
                    });
                    if (response.ok) {
                        await fetchProfiles();
                    }
                } catch (error) {
                    console.error('Error deleting profile:', error);
                }
            }
        }

        // Handle form submission
        document.getElementById('profileForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            // Reset any previous error states
            const inputs = document.querySelectorAll('#profileForm input, #profileForm textarea, #profileForm select');
            inputs.forEach(input => {
                input.classList.remove('border-red-500');
                const errorMsg = input.parentElement.querySelector('.error-message');
                if (errorMsg) errorMsg.remove();
            });
            
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            const profileId = document.getElementById('profileId').value;
            const photoInput = document.getElementById('photoInput');
            const photoFile = photoInput.files[0];
            let photoUrl = document.getElementById('photoUrl').value;

            try {
                // First, if we have a new photo, upload it
                if (photoFile) {
                    const photoFormData = new FormData();
                    photoFormData.append('photo', photoFile);
                    
                    const photoResponse = await fetch(`/api/profiles/${profileId}/photo`, {
                        method: 'POST',
                        headers: {
                            'CSRF-Token': csrfToken
                        },
                        credentials: 'include',
                        body: photoFormData
                    });
                    
                    if (!photoResponse.ok) {
                        throw new Error('Failed to upload photo');
                    }
                    
                    const photoData = await photoResponse.json();
                    photoUrl = photoData.photoUrl; // Get the Cloudinary URL
                }

                // Create profile data object
                const profileData = {
                    name: document.getElementById('name').value,
                    dateOfBirth: document.getElementById('dateOfBirth').value,
                    age: parseInt(document.getElementById('age').value),
                    height: document.getElementById('height').value,
                    weight: document.getElementById('weight').value,
                    nationality: document.getElementById('nationality').value,
                    placeOfBirth: document.getElementById('placeOfBirth').value,
                    totalScammedUSD: parseInt(document.getElementById('totalScammedUSD').value),
                    overview: document.getElementById('overview').value,
                    methodology: document.getElementById('methodology').value,
                    associatedProjects: document.getElementById('associatedProjects').value,
                    story: document.getElementById('story').value || '',
                    status: document.getElementById('status').value
                };
                
                // Add photo URL if exists
                if (photoUrl) {
                    profileData.photoUrl = photoUrl;
                }

                const url = profileId ? `/api/profiles/${profileId}` : '/api/profiles';
                const method = profileId ? 'PUT' : 'POST';
                
                const response = await fetch(url, {
                    method,
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': csrfToken
                    },
                    credentials: 'include',
                    body: JSON.stringify(profileData)
                });

                const data = await response.json();
                
                if (!response.ok) {
                    // Handle validation errors
                    if (data.error && data.error.includes('validation failed')) {
                        const errors = data.error.split(',');
                        errors.forEach(error => {
                            const field = error.split(':')[0].trim().split(' ')[0].toLowerCase();
                            const input = document.getElementById(field);
                            if (input) {
                                input.classList.add('border-red-500');
                                const errorDiv = document.createElement('div');
                                errorDiv.className = 'error-message text-red-500 text-sm mt-1';
                                errorDiv.textContent = error.split(':')[1] || error;
                                input.parentElement.appendChild(errorDiv);
                            }
                        });
                        throw new Error('Please fill in all required fields correctly');
                    }
                    throw new Error(data.error || 'Failed to save profile');
                }

                closeModal();
                await fetchProfiles();
            } catch (error) {
                console.error('Error saving profile:', error);
                const errorDiv = document.createElement('div');
                errorDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4';
                errorDiv.textContent = error.message;
                document.querySelector('#profileForm').insertBefore(errorDiv, document.querySelector('#profileForm').firstChild);
            }
        });

        // Handle file input change for preview
        document.getElementById('photoInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const preview = document.getElementById('photoPreview');
                    preview.src = e.target.result;
                    preview.style.display = 'block';
                }
                reader.readAsDataURL(file);
            }
        });

        // Add character count listeners
        document.getElementById('overview').addEventListener('input', function() {
            const count = this.value.length;
            document.getElementById('overviewCount').textContent = count;
            if (count < 50) {
                document.getElementById('overviewCount').classList.add('text-red-500');
            } else {
                document.getElementById('overviewCount').classList.remove('text-red-500');
            }
        });

        document.getElementById('methodology').addEventListener('input', function() {
            const count = this.value.length;
            document.getElementById('methodologyCount').textContent = count;
            if (count < 50) {
                document.getElementById('methodologyCount').classList.add('text-red-500');
            } else {
                document.getElementById('methodologyCount').classList.remove('text-red-500');
            }
        });

        // Load profiles when page loads
        document.addEventListener('DOMContentLoaded', () => fetchProfiles(1));
    </script>

    <!-- Add pagination container -->
    <div id="pagination" class="mt-4"></div>
</body>
</html> 